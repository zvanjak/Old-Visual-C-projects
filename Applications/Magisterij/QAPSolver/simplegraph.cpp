// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "simplegraph.h"

/////////////////////////////////////////////////////////////////////////////
// CSimpleGraph

IMPLEMENT_DYNCREATE(CSimpleGraph, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CSimpleGraph properties

CString CSimpleGraph::GetTitle()
{
	CString result;
	GetProperty(0x1, VT_BSTR, (void*)&result);
	return result;
}

void CSimpleGraph::SetTitle(LPCTSTR propVal)
{
	SetProperty(0x1, VT_BSTR, propVal);
}

BOOL CSimpleGraph::GetUseColors()
{
	BOOL result;
	GetProperty(0x2, VT_BOOL, (void*)&result);
	return result;
}

void CSimpleGraph::SetUseColors(BOOL propVal)
{
	SetProperty(0x2, VT_BOOL, propVal);
}

BOOL CSimpleGraph::GetUseLineStyles()
{
	BOOL result;
	GetProperty(0x3, VT_BOOL, (void*)&result);
	return result;
}

void CSimpleGraph::SetUseLineStyles(BOOL propVal)
{
	SetProperty(0x3, VT_BOOL, propVal);
}

BOOL CSimpleGraph::GetShowLegend()
{
	BOOL result;
	GetProperty(0x4, VT_BOOL, (void*)&result);
	return result;
}

void CSimpleGraph::SetShowLegend(BOOL propVal)
{
	SetProperty(0x4, VT_BOOL, propVal);
}

BOOL CSimpleGraph::GetShowCoordSystem()
{
	BOOL result;
	GetProperty(0x5, VT_BOOL, (void*)&result);
	return result;
}

void CSimpleGraph::SetShowCoordSystem(BOOL propVal)
{
	SetProperty(0x5, VT_BOOL, propVal);
}

double CSimpleGraph::GetStartX()
{
	double result;
	GetProperty(0x6, VT_R8, (void*)&result);
	return result;
}

void CSimpleGraph::SetStartX(double propVal)
{
	SetProperty(0x6, VT_R8, propVal);
}

double CSimpleGraph::GetEndX()
{
	double result;
	GetProperty(0x7, VT_R8, (void*)&result);
	return result;
}

void CSimpleGraph::SetEndX(double propVal)
{
	SetProperty(0x7, VT_R8, propVal);
}

BOOL CSimpleGraph::GetAllowDifferentYScale()
{
	BOOL result;
	GetProperty(0x8, VT_BOOL, (void*)&result);
	return result;
}

void CSimpleGraph::SetAllowDifferentYScale(BOOL propVal)
{
	SetProperty(0x8, VT_BOOL, propVal);
}

BOOL CSimpleGraph::GetShowCommandButtons()
{
	BOOL result;
	GetProperty(0x9, VT_BOOL, (void*)&result);
	return result;
}

void CSimpleGraph::SetShowCommandButtons(BOOL propVal)
{
	SetProperty(0x9, VT_BOOL, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CSimpleGraph operations

short CSimpleGraph::AddGraph(float* XValues, float* YValues, long PointsNum, LPCTSTR Legend)
{
	short result;
	static BYTE parms[] =
		VTS_PR4 VTS_PR4 VTS_I4 VTS_BSTR;
	InvokeHelper(0xa, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		XValues, YValues, PointsNum, Legend);
	return result;
}

BOOL CSimpleGraph::RemoveGraph(short GraphID)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0xb, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		GraphID);
	return result;
}

BOOL CSimpleGraph::RemoveAllGraphs()
{
	BOOL result;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CSimpleGraph::ShowGraph(BOOL GraphID)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xd, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		GraphID);
	return result;
}

BOOL CSimpleGraph::DrawtToMetafile(LPCTSTR FileName, long ExtentX, long ExtentY)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4 VTS_I4;
	InvokeHelper(0xe, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName, ExtentX, ExtentY);
	return result;
}

BOOL CSimpleGraph::SetLegendPos(float XPos, float YPos)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R4 VTS_R4;
	InvokeHelper(0xf, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		XPos, YPos);
	return result;
}

BOOL CSimpleGraph::DoesGraphAlreadyExist(float* XValues, float* YValues, long PointsNum)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PR4 VTS_PR4 VTS_I4;
	InvokeHelper(0x10, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		XValues, YValues, PointsNum);
	return result;
}

void CSimpleGraph::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
